name: QA Pipeline
on:
  pull_request:
    types: [closed]
    branches: qa
env:
  ISSUEID: ${{ github.head_ref }}
jobs:
 Deploy:
    if: "!contains(github.event.head_commit.message, '[skip ci]')" 
    runs-on: self-hosted
    steps:
      - name: clean up previous
        run: sudo rm -rf /tmp/moodle
      - name: connect to qa server
        run: aws eks --region us-east-1 update-kubeconfig --name aprende-dev
      - name: login to ECR
        run: aws ecr get-login-password --region us-east-1 | sudo docker login  --username AWS --password-stdin  https://249553882629.dkr.ecr.us-east-1.amazonaws.com
      - uses: actions/checkout@v2
        with:
          ref: 'qa' 
      - name: get current image
        run: IMAGE=$(kubectl -n qa describe deployment moodle | grep Image | awk '{print $2}') && sudo docker run -d $IMAGE  --entrypoint=/bin/bash
      - name: copy files
        run: |
          CONTAINER=$(sudo docker ps | awk '{print $1}'| head -n 2| tail -n1) 
          sudo docker cp $CONTAINER:/var/www/moodle /tmp/ 
      - name: get plugin code and compare
        run: |
          PLUGIN=$(echo ${{ github.repository }}| sed  's@.*/@@')
          PLUGINREPO=$(grep $PLUGIN /usr/local/moodle/.gitmodules  -B2 | grep url |awk '{print $3}') 
          echo $PLUGINREPO
          DATE=`date '+%Y%m%d%H%M%S'` 
          PLUGINPATH=$(grep $PLUGIN /usr/local/moodle/.gitmodules  -B2 | grep path |awk '{print $3}') 
          CURRENT=$(cat /tmp/moodle/$PLUGINPATH/version.php  | grep "plugin->version" | awk '{print $3}'|sed 's/.$//')
          NEW=$(cat /home/ubuntu/_work/$PLUGIN/$PLUGIN/version.php  |grep "plugin->version" | awk '{print $3}'|sed 's/.$//')
          echo Updating from  $CURRENT  to $NEW
          if  [ $CURRENT -gt $NEW ]; then echo cancel deploy, cannot downgrade version, current version $CURRENT version trying to install $NEW && sudo docker kill $(sudo docker ps -q)  && exit 1; else echo "continue"; fi
          sudo rm -rf /tmp/moodle/$PLUGINPATH/* 
          sudo cp -rf /home/ubuntu/_work/$PLUGIN/$PLUGIN/* /tmp/moodle/$PLUGINPATH/
          sudo chmod -R 755 /tmp/moodle
      - name: build, push and deploy image
        run:  |
          DATE=`date '+%Y%m%d%H%M%S'` 
          git clone git@github.com:Aprende-com/devops.git /tmp/devops-$DATE
          sudo cp /tmp/devops-$DATE/dockerfiles/Dockerfile /tmp
          cd /tmp
          sudo docker build -t 249553882629.dkr.ecr.us-east-1.amazonaws.com/aprende-moodle-qa:moodle-qa-3.10.1-$DATE .
          sudo docker push --quiet 249553882629.dkr.ecr.us-east-1.amazonaws.com/aprende-moodle-qa:moodle-qa-3.10.1-$DATE
          kubectl -n qa --record deployment/moodle set image moodle=249553882629.dkr.ecr.us-east-1.amazonaws.com/aprende-moodle-qa:moodle-qa-3.10.1-$DATE
          kubectl -n qa rollout status deployment moodle
      - name: run upgrade and purge_caches
        run: |
          #sleep 1
          POD=$(kubectl -n qa get pod | grep moodle | grep Running | awk  '{print $1}') 
          kubectl -n qa exec --stdin   $POD -- /usr/local/bin/php  /var/www/moodle/admin/cli/purge_caches.php          
          kubectl -n qa exec --stdin   $POD -- /usr/local/bin/php  /var/www/moodle/admin/cli/upgrade.php --non-interactive
      - name: The job has failed
        if: ${{ failure() }}
        run: |
          echo "upgrade failed, rolling back"      
          REV=$(kubectl -n qa rollout history deployment moodle |tail -n3 |sed '$ d' |sed '$ d'|awk '{print $1}')
          kubectl rollout undo deployment/moodle  --to-revision=$REV -n dev
          kubectl -n dev rollout status deployment moodle
      - name: clean up
        if: always()
        run: |
          #sudo docker rmi -f $(sudo docker images -a -q)
          sudo rm -rf /tmp/moodle
          sudo docker kill $(sudo docker ps -q)
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,took,action,branch,job,workflow # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
 automated-tests:
    needs: [Deploy]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'Aprende-com/aprende-automation'
          ref: '${{ github.head_ref }}'
          token: '{{ secrets.PERSONAL_TOKEN }}'
      - name: The job has failed
        if: ${{ failure() }}
        run: |
          export MESSAGE="Test case for <https://aprende.atlassian.net/browse/${{ github.head_ref }}|*${{ github.head_ref }}*> does not exist!"
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL_QA }}" \
          --header "Content-Type: application/json" \
          --data "{\"text\": \"${MESSAGE}\"}"
      - name: run automated tests
        continue-on-error: true
        run: |
         chmod +x src/test/resources/webdriver/linux/chromedriver
         if [[ -e /var/www/reports/${{ github.head_ref }} ]]; then sudo rm -rf /var/www/reports/${{ github.head_ref }}; fi
         echo ISSUEID es ${{ github.head_ref }}
         mvn clean install -DskipTests
         echo mvn clean verify -Dcucumber.options="--tags @issue:${{ github.head_ref }}"
         mvn clean verify -Dcucumber.options="--tags @issue:${{ github.head_ref }}" -Dserenity.public.url="http://reports.aprende.dev/${{ github.head_ref }}"
      - name: copy files
        #if: always()
        run: sudo cp -rf target/site/serenity /var/www/reports/${{ github.head_ref }}
      - name: URL
        #if: always()
        run: echo http://reports.aprende.dev/${{ github.head_ref }}
      - name: clean up
        #if: always ()
        run: sudo rm -rf *
      - name: slack notification
        #if: always ()
        run: |
          export MESSAGE="Test report for <https://aprende.atlassian.net/browse/${{ github.head_ref }}|*${{ github.head_ref }}*> is available! --> <http://reports.aprende.dev/${{ github.head_ref }}|View Report>"
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          --header "Content-Type: application/json" \
          --data "{\"text\": \"${MESSAGE}\"}"
      - name: slack notification QA
        #if: always ()
        run: |
          export MESSAGE="Test report for <https://aprende.atlassian.net/browse/${{ github.head_ref }}|*${{ github.head_ref }}*> is available! --> <http://reports.aprende.dev/${{ github.head_ref }}|View Report>"
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL_QA }}" \
          --header "Content-Type: application/json" \
          --data "{\"text\": \"${MESSAGE}\"}"
